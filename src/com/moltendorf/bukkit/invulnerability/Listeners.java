package com.moltendorf.bukkit.invulnerability;

import org.bukkit.World;
import org.bukkit.entity.*;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityTargetEvent;
import org.bukkit.event.player.*;
import org.bukkit.projectiles.ProjectileSource;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * Created by moltendorf on 14/09/10.
 */
public class Listeners implements Listener {

	final protected Plugin plugin;
	final protected World world;

	final protected Map<UUID, PlayerData> players = new HashMap<>();

	protected Listeners(final Plugin instance) {
		plugin = instance;

		world = plugin.getServer().getWorld("world");
	}

	public void makeInvulnerable(final Player player, long duration, boolean force) {
		final UUID id = player.getUniqueId();

		final PlayerData fetchedPlayerData = players.get(id);
		final PlayerData playerData;

		if (fetchedPlayerData == null) {
			playerData = new PlayerData();

			players.put(id, playerData);
		} else {
			playerData = fetchedPlayerData;
		}

		final long time = world.getFullTime();

		if (force || playerData.damage < time) {
			if (playerData.invulnerable < time) {
				player.sendMessage("You are now invulnerable.");
			}

			final long invulnerable = time + duration;

			if (invulnerable > playerData.invulnerable) {
				playerData.invulnerable = invulnerable;

				if (playerData.task != -1) {
					plugin.getServer().getScheduler().cancelTask(playerData.task);
				}

				playerData.task = plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new Runnable() {
					@Override
					public void run() {
						player.sendMessage("You are no longer invulnerable.");

						playerData.invulnerable = -6000;
						playerData.task = -1;
					}
				}, duration);
			}
		}
	}

	@EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
	public void PlayerChangedWorldEventMonitor(PlayerChangedWorldEvent event) {

		// Are we enabled at all?
		if (!plugin.configuration.global.enabled) {
			return;
		}

		final Player player = event.getPlayer();

		makeInvulnerable(player, 300, true);
	}

	@EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
	public void PlayerJoinEventMonitor(PlayerJoinEvent event) {

		// Are we enabled at all?
		if (!plugin.configuration.global.enabled) {
			return;
		}

		final Player player = event.getPlayer();

		makeInvulnerable(player, 300, false);
	}

	@EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
	public void PlayerRespawnEventMonitor(PlayerRespawnEvent event) {

		// Are we enabled at all?
		if (!plugin.configuration.global.enabled) {
			return;
		}

		final Player player = event.getPlayer();

		makeInvulnerable(player, 6000, true);
	}

	@EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
	public void PlayerTeleportEventMonitor(PlayerTeleportEvent event) {

		// Are we enabled at all?
		if (!plugin.configuration.global.enabled) {
			return;
		}

		switch (event.getCause()) {
			case COMMAND:
				makeInvulnerable(event.getPlayer(), 1200, true);

				break;

			case PLUGIN:
				makeInvulnerable(event.getPlayer(), 300, true);

				break;
		}
	}

	@EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
	public void EntityDamageByEntityEventMonitor(final EntityDamageByEntityEvent event) {

		// Are we enabled at all?
		if (!plugin.configuration.global.enabled) {
			return;
		}

		final Entity damager = event.getDamager();

		if (damager == null) {
			return;
		}

		final Player player;

		final EntityType type = damager.getType();

		final ProjectileSource shooter;

		switch (type) {
			case ARROW:
				shooter = ((Arrow) damager).getShooter();

				if (shooter != null && shooter instanceof Player) {
					player = (Player) shooter;
				} else {
					return;
				}

				break;

			case PLAYER:
				if (event.getCause() == EntityDamageEvent.DamageCause.ENTITY_ATTACK) {
					// Convert Entity to Player.
					player = (Player) damager;
				} else {
					return;
				}

				break;

			case SPLASH_POTION:
				shooter = ((ThrownPotion) damager).getShooter();

				if (shooter != null && shooter instanceof Player) {
					player = (Player) shooter;
				} else {
					return;
				}

				break;

			case PRIMED_TNT:
				final Entity source = ((TNTPrimed) damager).getSource();

				if (source != null && source.getType() == EntityType.PLAYER) {
					player = (Player) source;
				} else {
					return;
				}

				break;

			default:
				return;
		}

		final Entity entity = event.getEntity();
		final UUID id = player.getUniqueId();

		// No cancelling shooting yourself in the foot.
		if (entity.getUniqueId() == id) {
			return;
		}

		final PlayerData playerData = players.get(id);

		if (playerData == null) {
			return;
		}

		final long time = world.getFullTime();

		if (playerData.invulnerable >= time) {
			player.sendMessage("You are no longer invulnerable.");

			playerData.invulnerable = -6000;

			if (playerData.task != -1) {
				plugin.getServer().getScheduler().cancelTask(playerData.task);

				playerData.task = -1;
			}
		}

		playerData.damage = time + 600; // 600 = 30 seconds.
	}

	@EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
	public void EntityDamageEventHandler(EntityDamageEvent event) {

		// Are we enabled at all?
		if (!plugin.configuration.global.enabled) {
			return;
		}

		final Entity entity = event.getEntity();

		if (entity.getType() != EntityType.PLAYER) {
			return;
		}

		final Player player = (Player) entity;
		final UUID id = player.getUniqueId();

		PlayerData playerData = players.get(id);

		if (playerData == null) {
			return;
		}

		final long time = world.getFullTime();

		if (playerData.invulnerable >= time) {
			event.setCancelled(true);
		} else {
			playerData.damage = time + 600; // 600 = 30 seconds.
		}
	}

	@EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
	public void EntityTargetEventHandler(final EntityTargetEvent event) {

		// Are we enabled at all?
		if (!plugin.configuration.global.enabled) {
			return;
		}

		final Entity entity = event.getTarget();

		if (entity == null) {
			return;
		}

		final UUID id = entity.getUniqueId();

		final PlayerData playerData = players.get(id);

		if (playerData == null) {
			return;
		}

		final long time = world.getFullTime();

		if (playerData.invulnerable >= time) {
			event.setCancelled(true);
		}
	}
}
